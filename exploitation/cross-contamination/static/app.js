function getFlag(){
    const stack = new Error().stack;
    if (stack.includes("console") || stack.includes("anonymous")) {
        alert("Nice try! No cheating via console.");
        return;
    }
    flagReq().then(flag => {alert(flag)});
}


async function flagReq(){
    const stack = new Error().stack;
    if (stack.includes("console") || stack.includes("anonymous")) {
        alert("Nice try! No cheating via console.");
        return;
    }
    else{
        let response = await fetch('/call-python', { method:'POST'});
        let data = await response.json();
        return data.flag;
    }
}


let defaultPerson = {
    name: "default name",
    about: "Short description about the person",
    likes: "Some things the person enjoys",
    dislikes: "Some things the person doesn't like"
};

function createPerson(name, about, likes, dislikes){
    let person = Object.create(defaultPerson);
    person.name = name;
    person.about = about;
    person.likes = likes;
    person.dislikes = dislikes;

    return person;
}


function updatePerson(event, originalPerson){

    event.preventDefault(); // Prevent default form submission

    const form = document.getElementById('updateForm');
    const formData = new FormData(form);

    const name = formData.get('name');
    const item = formData.get('item');
    const rawInfo = formData.get('info');
    try {
        info = JSON.parse(rawInfo);
      } catch (e) {
        console.log(e.message);
        info = rawInfo; // Keep it as a string if parsing fails
      }
    newInfo = {[item]: info};

    console.log("ITEM: ", item);
    console.log("INFO : ", info);
//    originalPerson = JSON.parse(person);   
    // console.log("originalPerson: ", originalPerson);
    
    let newPerson = createPerson(name, originalPerson["about"], originalPerson["likes"], originalPerson["dislikes"]); 

    // console.log("person ", person);

    merge(newPerson, newInfo); // add in additional stuff
    // merge(newInfo, newPerson);
    console.log("newPerson after ", newPerson);
    console.log("newInfo after ", newInfo);
    updateReq(newPerson);
}



async function loadDirectory(){
    let response = await fetch('/get-directory', { method:'GET'});
    let data = await response.json();
    return data;
}

async function updateReq(person){
    const stack = new Error().stack;
    if (stack.includes("console")) {
        alert("Nice try! No cheating via console.");
        return;
    }
    else{
        let response = await fetch('/update-person', {
            "method":"POST",
            headers: {
                'Content-Type': 'application/json'
            },
            "body": JSON.stringify(person)
        });
    }
}


function merge(target, source) {
    for (const attr in source) {
      if (
        typeof target[attr] === "object" &&
        typeof source[attr] === "object"
      ) {
        merge(target[attr], source[attr])
      } else {
        target[attr] = source[attr]
      }
    }
  }